id,question,answer,commands,topic,category,source_query,difficulty,timestamp,tags
1,"\nIs there a (Unix) shell script to format JSON in human-readable form?\n\nBasically, I want it to transform the following:\n\n\n{ ""foo"": ""lorem"", ""bar"": ""ipsum"" }\n\n\n... into something like this:\n\n\n{\n ""foo"": ""lorem"",\n ""bar"": ""ipsum""\n}\n\n","\nWith Python 2.6+ or 3 you can use the [json.tool](https://docs.python.org/3/library/json.html#module-json.tool) module:\n\n\necho \'{""foo"": ""lorem"", ""bar"": ""ipsum""}\' | python -m json.tool\n\n\nor, if the JSON is in a file, you can do:\n\n\npython -m json.tool my_json.json\n\n\nif the JSON is from an internet source such as an API, you can use\n\n\ncurl http://my_url/ | python -m json.tool\n\n\nFor convenience in all of these cases you can make an alias:\n\n\nalias prettyjson=\'python -m json.tool\'\n\n\n---\n\nFor even more convenience with a bit more typing to get it ready:\n\n\nprettyjson_s() {\n echo ""$1"" | python -m json.tool\n}\n\nprettyjson_f() {\n python -m json.tool ""$1""\n}\n\nprettyjson_w() {\n curl ""$1"" | python -m json.tool\n}\n\n\nfor all the above cases. You can put this in `.bashrc` and it will be available every time in shell. Invoke it like `prettyjson_s \'{""foo"": ""lorem"", ""bar"": ""ipsum""}\'`.\n\nNote that as [@pnd](https://stackoverflow.com/users/5018816/pnd) pointed out in the [comments](https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script#comment58654798_1920585) below, in Python 3.5+ the JSON object is no longer sorted by default. To sort, add the [`--sort-keys`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys) flag to the end. I.e. `... | python -m json.tool --sort-keys`.\n\nAnother useful option might be [`--no-ensure-ascii`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-no-ensure-ascii) which disables escaping of non-ASCII characters (new in version 3.9).\n","['curl ""$1"" | python -m json.tool\\n}\\n\\n\\nfor all the above cases. You can put this in `.bashrc` and it will be available every time in shell. Invoke it like `prettyjson_s \\\'{""foo"": ""lorem"", ""bar"": ""ipsum""}\\\'`.\\n\\nNote that as [@pnd](https://stackoverflow.com/users/5018816/pnd) pointed out in the [comments](https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script#comment58654798_1920585) below, in Python 3.5+ the JSON object is no longer sorted by default. To sort, add the [`--sort-keys`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys) flag to the end. I.e. `... | python -m json.tool --sort-keys`.\\n\\nAnother useful option might be [`--no-ensure-ascii`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-no-ensure-ascii) which disables escaping of non-ASCII characters (new in version 3.9).\\n \\necho \\\'{""foo"": ""lorem"", ""bar"": ""ipsum""}\\\' | python -m json.tool\\npython -m json.tool my_json.json\\ncurl http://my_url/ | python -m json.tool\\nalias prettyjson=\\\'python -m json.tool\\\'\\nprettyjson_s() {\\n echo ""$1"" | python -m json.tool\\n}\\nprettyjson_f() {\\n python -m json.tool ""$1""\\n}\\nprettyjson_w() {\\n curl ""$1"" | python -m json.tool\\n}\\n', 'Python 2.6+ or 3 you can use the [json.tool](https://docs.python.org/3/library/json.html#module-json.tool) module:\\n\\n\\necho \\\'{""foo"": ""lorem"", ""bar"": ""ipsum""}\\\' | python -m json.tool\\n\\n\\nor, if the JSON is in a file, you can do:\\n\\n\\npython -m json.tool my_json.json\\n\\n\\nif the JSON is from an internet source such as an API, you can use\\n\\n\\ncurl http://my_url/ | python -m json.tool\\n\\n\\nFor convenience in all of these cases you can make an alias:\\n\\n\\nalias prettyjson=\\\'python -m json.tool\\\'\\n\\n\\n---\\n\\nFor even more convenience with a bit more typing to get it ready:\\n\\n\\nprettyjson_s() {\\n echo ""$1"" | python -m json.tool\\n}\\n\\nprettyjson_f() {\\n python -m json.tool ""$1""\\n}\\n\\nprettyjson_w() {\\n curl ""$1"" | python -m json.tool\\n}\\n\\n\\nfor all the above cases. You can put this in `.bashrc` and it will be available every time in shell. Invoke it like `prettyjson_s \\\'{""foo"": ""lorem"", ""bar"": ""ipsum""}\\\'`.\\n\\nNote that as [@pnd](https://stackoverflow.com/users/5018816/pnd) pointed out in the [comments](https://stackoverflow.com/questions/352098/how-can-i-pretty-print-json-in-a-shell-script#comment58654798_1920585) below, in Python 3.5+ the JSON object is no longer sorted by default. To sort, add the [`--sort-keys`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys) flag to the end. I.e. `... | python -m json.tool --sort-keys`.\\n\\nAnother useful option might be [`--no-ensure-ascii`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-no-ensure-ascii) which disables escaping of non-ASCII characters (new in version 3.9).\\n \\necho \\\'{""foo"": ""lorem"", ""bar"": ""ipsum""}\\\' | python -m json.tool\\npython -m json.tool my_json.json\\ncurl http://my_url/ | python -m json.tool\\nalias prettyjson=\\\'python -m json.tool\\\'\\nprettyjson_s() {\\n echo ""$1"" | python -m json.tool\\n}\\nprettyjson_f() {\\n python -m json.tool ""$1""\\n}\\nprettyjson_w() {\\n curl ""$1"" | python -m json.tool\\n}\\n']",bash,shell_scripting,stackoverflow.com command line questions,beginner,2025-06-18T12:43:42.727128,"['curl', 'bash', 'shell', 'sort', 'python']"
11,[suspend` is a builtin command in Bash. When would you naturally use this command and find it useful?],"[Let's say you lack both GNU `screen` and `tmux` (and X11, *and* virtual consoles) but want to switch between a login shell and another interactive shell.\n\nYou would first login on the console, and then start a new shell, temporarily blocking the login shell. To get the login shell back to do some work there, you'd do `suspend`. Then you would `fg` to get the interactive shell back to continue with whatever it was you did there.\n\nIn fact, with job control, the login shell could spawn a number of interactive shells as background jobs that you could switch to with `fg %1`, `fg %2` etc., but to get back to the login shell, you would need to use `suspend` unless you wanted to manually `kill -s STOP $$`.\n\nAlso note that `Ctrl`+`Z` at the prompt in an interactive shell won't suspend it.]",[],bash,shell_scripting,bash scripting examples,intermediate,2025-06-18T12:54:43.378098,"['tar', 'find', 'shell', 'bash']"
5,"\nI\'m trying to compress a folder (`/var/www/`) to `~/www_backups/$time.tar` where `$time` is the current date.\n\nThis is what I have:\n\n\ncd /var/www && sudo tar -czf ~/www_backups $time""\n\n\nI am completely lost and I\'ve been at this for hours now. Not sure if `-czf` is correct. I simply want to copy all of the content in `/var/www` into a `$time.tar` file, and I want to maintain the file permissions for all of the files. Can anyone help me out?\n","\nTo `tar` and `gzip` a folder, the syntax is:\n\n\ntar czf name_of_archive_file.tar.gz name_of_directory_to_tar\n\n\nAdding `-` before the options (`czf`) is optional with `tar`. The effect of `czf` is as follows:\n\n* `c` — create an archive file (as opposed to extract, which is `x`)\n* `f` — filename of the archive file\n* `z` — filter archive through `gzip` (remove this option to create a `.tar` file)\n\nIf you want to `tar` the current directory, use `.` to designate that.\n\nTo construct filenames dynamically, use the `date` utility (look at its man page for the available format options). For example:\n\n\ncd /var/www &&\ntar czf ~/www_backups/$(date +%Y%m%d-%H%M%S).tar.gz .\n\n\nThis will create a file named something like `20120902-185558.tar.gz`.\n\nOn Linux, chances are your `tar` also supports BZip2 compression with the `j` rather than `z` option. And possibly others. Check the man page on your local system.\n","['tar', 'gzip']",file_ops,file_operations,tar gzip command examples,intermediate,2025-06-18T12:45:55.522385,"['sudo', 'gzip', 'compress', 'archive', 'sed']"
3,"[Full question text here, preserve original formatting and context] Even after reading this question: [git-push-current-branch](https://stackoverflow.com/questions/948354/git-push-current-branch), I am still having difficulty figuring out how I should write my `git push` command. As mentioned in the question link, it\'s not clear from the documentation.\n\nI would like to use my \'real world\' example. Following is what I see when I run the `git status` command on the top level of my branch:\n\n> On branch amd_qlp_tester\n>\n> Your branch is ahead of \'origin/amd_qlp_tester\' by 5 commits.\n>\n> etc...\n\nMy branch name is `amd_qlp_tester` but it was ""branched"" off from the main branch (if I have the terms wrong it\'s because of my SVN background). But then there is also the name `origin/amd_qlp_testser`\n\nSo how do I phrase my push command?\n\nIs it any of the following?\n\n\ngit push origin/amd_qlp_tester\ngit push origin amd_qlp_tester\ngit push amd_qlp_tester\ngit push origin\ngit push\n","[Complete answer text here, including ALL explanations and code examples] If your Local branch and remote branch is the same name then you can just do it:\n\n\ngit push origin branchName\n\n\nWhen your local and remote branch name is different then you can do it:\n\n\ngit push origin localBranchName:remoteBranchName\n",['git push origin branchName git push origin localBranchName:remoteBranchName'],git,version_control,git command examples,intermediate,2025-06-18T12:44:25.336101,"['commit', 'git', 'branch']"
9,"\nCan anyone explain these command lines from GitHub ""git tutorial""?\n\nEvery time you create a new repository on GitHub, it shows you these command lines that I\'ve always found useful...\n\n\necho ""# Project"" >> README.md\ngit init\ngit add README.md\ngit commit -m ""first commit""\ngit branch -M master\ngit remote add origin https://github.com/Username/Project.git\ngit push -u origin master\n\n\nBut I have no idea what they really do... Can anyone help this poor Git newbie?\n","\n\necho ""# Project"" >> README.md\n\n\nThis creates a README in your current directory\n\n\ngit init\n\n\nThis will create a new .git directory to store commits and other objects.\n\n\ngit add README.md\n\n\nBefore adding a file to the repository, it must first be staged.\n\n\ngit commit -m ""initial commit""\n\n\nThis would commit our staged changes into the repository.\n\n\ngit branch -M master\n\n\nWith a -m or -M option, oldbranch will be renamed to newbranch. If oldbranch had a corresponding reflog, it is renamed to match newbranch, and a reflog entry is created to remember the branch renaming. If newbranch exists, -M must be used to force the rename to happen\n\n\ngit remote add origin https://github.com/Username/Project.git\n\n\nThis would add a remote url to an existing git repository\n\n\ngit push -u origin master\n\n\nPush - moves/uploads the local changes (or snapshot) to the remote GitLab repository\n","['git repository\\n\\n\\ngit push -u origin master\\n\\n\\nPush - moves/uploads the local changes (or snapshot) to the remote GitLab repository\\n \\necho ""# Project"" >> README.md\\ngit init\\ngit add README.md\\ngit commit -m ""initial commit""\\ngit branch -M master\\ngit remote add origin https://github.com/Username/Project.git\\ngit push -u origin master\\n']",git,version_control,github command line tutorials,intermediate,2025-06-18T12:53:35.193733,"['git', 'branch', 'repository', 'sed', 'command line']"
7,\nI am using **Python 2.7** + **virtualenv version 1.10.1** for running `myproject` project. Due to some other projects requirement I have to work with another version of Python (3.5). For this I have installed Python in my user directory. Also I have downloaded and installed [`virtualenv`](https://virtualenv.pypa.io/en/latest/) (**version 15.1.0**) into my user directory.\n\nBut whenever I am trying to create virtual `env` I am getting the below error\n\n\npython virtualenv/virtualenv.py myproject\n\n\n---\n\n\nUsing base prefix '/home/myuser/python3'\nNew python executable in /home/mount/myuser/project_python3/myproject/bin/python\nERROR: The executable /home/mount/myuser/project_python3/myproject/bin/python is not functioning\nERROR: It thinks sys.prefix is '/home/myuser/python3' (should be '/home/mount/myuser/project_python3/myproject')\nERROR: virtualenv is not compatible with this system or executable\n\n\nWhat am I doing wrong here and how do I solve it?\n,"\nIn Python 3.6+, the `pyvenv` module is *deprecated*. Use the following one-liner instead:\n\n\npython3 -m venv \n\n\nThis is the [recommended way](https://docs.python.org/3/library/venv.html) to create *virtual environments* by the Python community.\n","['Python 3.6+, the `pyvenv` module is *deprecated*. Use the following one-liner instead:\\n\\n\\npython3 -m venv \\n\\n\\nThis is the [recommended way](https://docs.python.org/3/library/venv.html) to create *virtual environments* by the Python community.\\n \\npython3 -m venv \\n']",python_env,shell_scripting,python venv pip commands,intermediate,2025-06-18T12:47:44.047017,"['cut', 'python', 'venv', 'virtualenv']"
